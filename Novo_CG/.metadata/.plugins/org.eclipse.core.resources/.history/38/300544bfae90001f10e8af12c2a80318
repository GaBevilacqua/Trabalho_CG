package mycompany;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class Desenhador extends JFrame {

    private JPanel painelDesenho;
    private String modoDesenho = "livre";
    private Point pontoInicial;

    public Desenhador() {
        setTitle("Draw");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JMenuBar menuBar = new JMenuBar();
        JMenu menuDesenho = new JMenu("Desenho");
        JMenuItem itemLivre = new JMenuItem("Desenho Livre");
        JMenuItem itemLinha = new JMenuItem("Desenhar Linha");
        JMenuItem itemLinhaBresenham = new JMenuItem("Desenhar Linha Bresenham");
        JMenuItem itemCirculo = new JMenuItem("Desenhar Círculo");
        itemLivre.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                modoDesenho = "livre";
            }
        });

        itemLinha.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                modoDesenho = "linha";
            }
        });

        itemCirculo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                modoDesenho = "circulo";
            }
        });
        itemLinhaBresenham.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                modoDesenho= "bresenham";
            }
        });

        menuDesenho.add(itemLivre);
        menuDesenho.add(itemLinha);
        menuDesenho.add(itemLinhaBresenham);
        menuDesenho.add(itemCirculo);
        menuBar.add(menuDesenho);
        
        JMenuItem mntmNewMenuItem = new JMenuItem("Desenhar Circulo com Param\u00E9trica e Sim\u00E9trica");
        menuDesenho.add(mntmNewMenuItem);
        
        JMenuItem mntmNewMenuItem_1 = new JMenuItem("Desenhar Circulo com rota\u00E7\u00E3o (sen cos)");
        menuDesenho.add(mntmNewMenuItem_1);
        
        JMenuItem mntmNewMenuItem_2 = new JMenuItem("Desenhar C\u00EDrculo com Bresenham");
        menuDesenho.add(mntmNewMenuItem_2);
        
        JMenuItem mntmNewMenuItem_3 = new JMenuItem("Recorte Cohen-Sutherland");
        menuDesenho.add(mntmNewMenuItem_3);
        
        JMenuItem mntmNewMenuItem_4 = new JMenuItem("Casinha");
        menuDesenho.add(mntmNewMenuItem_4);

        setJMenuBar(menuBar);

        painelDesenho = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                // Aqui você pode adicionar a lógica de desenho se desejar manter algo mais específico.
            }
        };

        painelDesenho.setBackground(Color.WHITE);
        painelDesenho.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                pontoInicial = e.getPoint();
            }
        });

        painelDesenho.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                Graphics g = painelDesenho.getGraphics();
                g.setColor(Color.RED); 
                if (modoDesenho.equals("livre")) {
                    
                    g.drawLine(pontoInicial.x, pontoInicial.y, e.getX(), e.getY());
                    pontoInicial = e.getPoint();
                }
            }
        });

        painelDesenho.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                Graphics g = painelDesenho.getGraphics();
                switch (modoDesenho) {
                    case "linha" -> desenharLinha(g, pontoInicial.x, pontoInicial.y, e.getX(), e.getY());
                    case "circulo" -> desenharCirculo(g, pontoInicial.x, pontoInicial.y, e.getX(), e.getY());
                    case "bresenham" -> desenharLinhaBresenham(g, pontoInicial.x, pontoInicial.y, e.getX(), e.getY());
                    default -> {
                    }
                }
                
            }
        });

        getContentPane().add(painelDesenho);
    }
    private void limparTela(Graphics g){
       g.fillRect(0, 0, getWidth(), getHeight());
    }
    private void desenharLinha(Graphics g, int x0, int y0, int x1, int y1) {
        int deltay = y1 - y0;
        int deltax = x1 - x0;

        // Inclinação
        float m = (deltax != 0) ? (float) deltay / deltax : Float.POSITIVE_INFINITY; // Evita divisão por zero para linhas verticais

        if (Math.abs(deltax) > Math.abs(deltay)) { // Caso mais horizontal
            if (x1 < x0) {
                for (int x = x1; x <= x0; x++) {
                    int y = (int) Math.round(m * (x - x0) + y0);
                    g.drawLine(x, y, x, y);  // Desenhar ponto (x, y)
                    System.out.println("entrou aqui 1");
                }
            } else {
                for (int x = x0; x <= x1; x++) {
                    int y = (int) Math.round(m * (x - x0) + y0);
                    g.drawLine(x, y, x, y);  // Desenhar ponto (x, y)
                    System.out.println("entrou aqui 2");
                }
            }
        } else { // Caso mais vertical
            if (y1 < y0) {
                for (int y = y1; y <= y0; y++) {
                    int x = (int) Math.round((y - y0) / m + x0);
                    g.drawLine(x, y, x, y);  // Desenhar ponto (x, y)
                    System.out.println("entrou aqui 3");
                }
            } else {
                for (int y = y0; y <= y1; y++) {
                    int x = (int) Math.round((y - y0) / m + x0);
                    g.drawLine(x, y, x, y);  // Desenhar ponto (x, y)
                    System.out.println("entrou aqui 4");
                }
            }
        }

        System.out.println("Ponto inicial: (" + x0 + ", " + y0 + ")");
        System.out.println("Ponto final: (" + x1 + ", " + y1 + ")");
        System.out.println("Delta X: " + deltax);
        System.out.println("Delta Y: " + deltay);
    }

    private void desenharCirculo(Graphics g, int x0, int y0, int x1, int y1) {
       double raio = Math.sqrt(Math.pow((x1-x0),2)+Math.pow((y1-y0),2));
       int numPoints = (int) Math.max(1, 2*Math.PI*raio);
        
        for (int i = 0; i < numPoints; i++) {
            double angle = 2 * Math.PI * i / numPoints;
            int x = (int) Math.round(x0 + raio * Math.cos(angle));
            int y = (int) Math.round(y0 + raio * Math.sin(angle));
            g.drawLine(x, y, x, y);  // Desenhar ponto (x, y)
        }
    }

    private void desenharLinhaBresenham(Graphics g, int x0, int y0, int x1, int y1) {
        // Algoritmo de Bresenham para desenhar uma linha reta
        int dx = Math.abs(x1 - x0);
        int dy = Math.abs(y1 - y0);
        int sx = (x0 < x1) ? 1 : -1;
        int sy = (y0 < y1) ? 1 : -1;
        int err = dx - dy;

        while (true) {
            g.drawLine(x0, y0, x0, y0); // Desenha um ponto na posição atual
            if (x0 == x1 && y0 == y1) {
                break;
            }
            int e2 = err * 2;
            if (e2 > -dy) {
                err -= dy;
                x0 += sx;
            }
            if (e2 < dx) {
                err += dx;
                y0 += sy;
            }
        }
    }
    private void desenharLinhaBresenham2(Graphics g, int x0, int y0, int x1, int y1) {
      int dx = x1-x0;
      int dy = y1-y0;
      int error = 2*dy-dx;
      
      int x = x0;
      int y= y0;
      for(; x<=x1;x++){
          g.drawLine(x, y, x, y);
          if (error>0){
              y++;
              error-=2*dx;
          }
          else{
              error+=2*dy;
          }
      }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Desenhador().setVisible(true);
            }
        });
    }
}